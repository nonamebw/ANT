package littlecase.netease;

import java.util.Arrays;
import java.util.Scanner;
/*俄罗斯方块
        小易有一个古老的游戏机，上面有着经典的游戏俄罗斯方块。因为它比较古老，所以规则和一般的俄罗斯方块不同。
        荧幕上一共有 n 列，每次都会有一个 1 x 1 的方块随机落下，在同一列中，后落下的方块会叠在先前的方块之上，当一整行方块都被占满时，这一行会被消去，并得到1分。
        有一天，小易又开了一局游戏，当玩到第 m 个方块落下时他觉得太无聊就关掉了，小易希望你告诉他这局游戏他获得的分数。
        输入描述:
        第一行两个数 n, m
        第二行 m 个数，c1, c2, ... , cm ， ci 表示第 i 个方块落在第几列
        其中 1 <= n, m <= 1000, 1 <= ci <= n
        输出描述:
        小易这局游戏获得的分数

        输入例子1:
        3 9
        1 1 2 2 2 3 1 2 3
        输出例子1:
        2*/

public class Solution_0802 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<m; ++i){
            arr[scanner.nextInt()-1]++;
        }
        Arrays.sort(arr);
        System.out.println(arr[0]);
    }
}


package littlecase.netease;

import java.util.Scanner;

public class Solution_0802_2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] fun = new int[n];
        int[] sleep = new int[n];
        int ans = 0;
        for (int i=0; i<n; ++i){
            fun[i] = scanner.nextInt();
        }
        for (int i=0; i<n; ++i){
            sleep[i] = scanner.nextInt();
            if(sleep[i]==1)
                ans += sleep[i];
        }

        int res = 0;
        int max = 0;
        int m = 0;
        if(k>=n){
            for (int i=0; i<n; ++i){
                if (sleep[i]==0)
                    ans += sleep[i];
            }
            System.out.println(ans);
        }else {
            while (m<n){
                if(m+k<=n){
                    for (int i=m; i<k; ++i){
                        if (sleep[i]==0){
                            res = res + sleep[i];
                        }
                    }
                    max = Math.max(max,res);
                }
                ++m;
            }
            System.out.println(ans+max);
        }
    }
}


import java.util.Scanner;

public class Test {
    public static void main(String[] args) {
        test_1();
    }

    public static void test_1(){
        //第一行取一个数字
        //第二行读取一整行
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        System.out.println(a);
        scanner.nextLine();
        String b = scanner.nextLine();
        System.out.println(b);
    }

    public static void test_2(){
        //有且只能读取第一行    4      (空格)          jasldfjasldfjasl
        //输出 a = 4; b = jasldfjasldfjasl;
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        System.out.println(a);
        scanner.nextLine();
        String b = scanner.nextLine();
        System.out.println(b);
    }
}


如果没有意向锁，当已经有人使用行锁对表中的某一行进行修改时，如果另外一个请求要对全表进行修改，
那么就需要对所有的行是否被锁定进行扫描，在这种情况下，效率是非常低的；不过，在引入意向锁之后，
当有人使用行锁对表中的某一行进行修改之前，会先为表添加意向互斥锁（IX），再为行记录添加互斥锁（X），
在这时如果有人尝试对全表进行修改就不需要判断表中的每一行数据是否被加锁了，只需要通过等待意向互斥锁被释放就可以了。





